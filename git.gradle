apply plugin: 'co.riiid.gradle'

def String getLatestChangelog() {

    def changes = ""
    def changelogFile = rootProject.file("app/src/main/res/raw/changelog.txt")

    // read the file from path
    def file = new File("${changelogFile}")
    def versionFound = false

    // read the file line by line
    def lines = file.readLines()
    for (String line : lines) {

        // check if the line contains the identifier character for the date string
        if (line.trim().startsWith("% VERSION ${project.ext.versionName}")) {
            versionFound = true
            continue
        }

        // skip the date information on the next line
        if (versionFound && line.trim().startsWith("_")) {
            continue
        }

        // check if the line contains the identifier character for the version string
        if (versionFound && line.startsWith("\$")) {
            break
        }

        if (versionFound) {
            changes += line.trim() + "\n"
        }
    }

    return changes
}

github {
    owner = tvhProperty("gitUser")
    repo = tvhProperty("gitUser")
    token = tvhProperty("gitToken")
    tagName = "${project.ext.versionName}"
    targetCommitish = tvhProperty("gitBranch")
    name = "New version ${project.ext.versionName}"
    body = """${getLatestChangelog()}"""
    assets = [
            "app/build/outputs/apk/${project.property("archivesBaseName")}-release.apk"
    ]
}

// Tasks
task showLatestChangeLog {
    logger.lifecycle("showLatestChangeLog...")
    logger.lifecycle("${getLatestChangelog()}")
}

task tagRelease {
    description = 'Tags the current head with the project\'s version.'
    doLast {

        def tagName = project.ext.versionName
        def tags = grgit.tag.list()
        def tagAlreadyPresent = false

        for (Object item : tags) {
            if (item.getName() == String.valueOf(tagName)) {
                logger.lifecycle("Tag '${tagName}' already present")
                tagAlreadyPresent = true
            }
        }
        if (!tagAlreadyPresent) {
            grgit.tag.add {
                name = tagName
                message = "Release of ${project.ext.versionCode}"
            }
        }
    }
}

tasks.tagRelease.dependsOn("validateVersionInfo")
tasks.githubRelease.dependsOn("tagRelease")